{"version":3,"sources":["components/Loader.js","components/DayView.js","components/WeekView.js","components/Search.js","customHooks/FetchHook.js","App.js","serviceWorker.js","index.js"],"names":["Loader","react_default","a","createElement","className","DayView","_ref","weatherData","_useState","useState","_useState2","Object","slicedToArray","animation","setAnimation","addAnimation","removeAnimation","concat","tabIndex","onFocus","onBlur","src","alt","Weekview","JSON","parse","localStorage","getItem","components_DayView","Search","id","units","searchData","fetchedData","url","loading","state","setState","useEffect","currentState","fetch","then","response","status","json","console","log","data","setItem","stringify","catch","err","message","FetchHook","type","placeholder","App","WeekView","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d189d72.chunk.js","sourcesContent":["import React from 'react';\nimport './loader.css';\n\nexport default function Loader() {\n    return <div className='loader'></div>\n}","import React, { useState } from 'react';\nimport './dayView.css';\n\nimport Loader from './Loader';\n\nfunction DayView({ weatherData }) {\n    const [animation, setAnimation] = useState('')\n\n    function addAnimation() {\n        setAnimation('animate');\n    }\n\n    function removeAnimation() {\n        setAnimation('');\n    }\n\n    if (!weatherData) {\n        return (\n            <div \n            className={`dayView ${animation}`} \n            tabIndex='0' \n            onFocus={addAnimation} \n            onBlur={removeAnimation}\n            >\n                <Loader />\n            </div>\n        )\n    } else {\n        return(\n            <div \n            className={`dayView ${animation}`} \n            tabIndex='0' \n            onFocus={addAnimation} \n            onBlur={removeAnimation}\n            >\n                <div className='image__container'>\n                    <img \n                    src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbMDREjG8IVtReaXgYfEsVpDNd6WA8XSr6G8g3HA_wVUXyQ9SNdA' \n                    alt='weather icon' \n                    className='image'\n                    />\n                </div>\n                <div>25</div>\n                <div>25</div>\n                <div>25</div>\n                <div>25</div>\n                <div>25</div>\n               \n            </div>\n        )\n    }\n}\n\nexport default DayView;","import React from 'react';\nimport './weekView.css';\nimport DayView from './DayView';\n\nfunction Weekview() {\n    const weatherData = JSON.parse(localStorage.getItem('fetched data'));\n    return(\n        <section className='weekView'>\n            <DayView weatherData={weatherData}/>\n            <DayView weatherData={weatherData}/>\n            <DayView weatherData={weatherData}/>\n            <DayView weatherData={weatherData}/>\n            <DayView weatherData={weatherData}/>\n        </section>\n    )\n}\n\nexport default Weekview;","import React, { useState } from 'react';\nimport FetchHook from '../customHooks/FetchHook';\nimport './search.css';\n\nexport default function Search() {\n    const [ searchData, setSearchData ] = useState({\n        id: '294800',\n        units: 'metric'\n    })\n    // http://api.openweathermap.org/data/2.5/forecast?id=294800&units=metric&APPID=ee6f1db9856f6c0e2d3bc0e424530b43\n    const { fetchedData } = FetchHook(`\n    http://api.openweathermap.org/data/2.5/forecast?id=${searchData.id}&units=${searchData.units}&APPID=ee6f1db9856f6c0e2d3bc0e424530b43\n    `);\n    console.log('fetched data', fetchedData);\n\n    return(\n        <input className='search' type='text' placeholder='Search by city name'></input>\n    )\n}","import { useEffect, useState} from 'react';\nexport default function FetchHook(url) {\n    // http://api.openweathermap.org/data/2.5/forecast?id=294800&units=metric&APPID=ee6f1db9856f6c0e2d3bc0e424530b43\n\n    const [state, setState] = useState({\n        fetchedData: null,\n        loading: true\n    });\n    \n    useEffect(() => {\n        setState(currentState => ({\n            fetchedData: currentState.fetchedData,\n            loading: true\n        }));\n\n        fetch(url)\n        .then(response => {\n            if(response.status !== 200) {\n            console.log(`Oops! something not working.\n            Response status is: ${response.status}`);\n            return;\n            }\n            return response.json()\n        }).then(data => {\n            localStorage.setItem('fetched data', JSON.stringify(data))\n            setState({\n                fetchedData: data,\n                loading: false\n            });\n            console.log(data);\n        })\n        .catch((err) => {\n            console.log(err.message);\n        })\n    },[url])\n    \n    return state;\n}","import React from 'react';\nimport WeekView from './components/WeekView';\nimport Search from './components/Search';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className='app'>\n      <h1 className='header--large header--center'>Weather App</h1>\n      <Search />\n      <WeekView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}